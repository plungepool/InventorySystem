package model;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/** This class represents a product in inventory.*/
public class Product {
    private ObservableList<Part> associatedParts = FXCollections.observableArrayList();
    private int id;
    private String name;
    private double price;
    private int stock;
    private int min;
    private int max;

    /** Constructor for product objects.
     @param id Unique product ID, typically auto-generated by program.
     @param name Product name.
     @param price Product price.
     @param stock Current number of product in stock.
     @param min Minimum available stock.
     @param max Maximum available stock.*/
    public Product(int id, String name, double price, int stock, int min, int max) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.stock = stock;
        this.min = min;
        this.max = max;
    }

    /** Sets product ID.*/
    public void setId(int id) {
        this.id = id;
    }

    /** Sets product name.*/
    public void setName(String name) {
        this.name = name;
    }

    /** Sets product price.*/
    public void setPrice(double price) {
        this.price = price;
    }

    /** Sets available product stock.*/
    public void setStock(int stock) {
        this.stock = stock;
    }

    /** Sets product minimum stock.*/
    public void setMin(int min) {
        this.min = min;
    }

    /** Sets product maximum stock.*/
    public void setMax(int max) {
        this.max = max;
    }

    /** Returns product ID.*/
    public int getId() {
        return id;
    }

    /** Returns product name.*/
    public String getName() {
        return name;
    }

    /** Returns product price.*/
    public double getPrice() {
        return price;
    }

    /** Returns available product stock.*/
    public int getStock() {
        return stock;
    }

    /** Returns product minimum stock.*/
    public int getMin() {
        return min;
    }

    /** Returns product maximum stock.*/
    public int getMax() {
        return max;
    }

    /** Adds part to product's associated parts list.
     @param part Part to associate with product.*/
    public void addAssociatedPart(Part part) {
        associatedParts.add(part);
    }

    /** Method for deleting part associated with product.*/
    public boolean deleteAssociatedPart(Part selectedAssociatedPart) {
        if (associatedParts.contains(selectedAssociatedPart)) {
            associatedParts.remove(selectedAssociatedPart);
            return true;
        }
        else
            return false;
    }

    /** Returns all parts associated with product.*/
    public ObservableList<Part> getAllAssociatedParts() {
        return associatedParts;
    }

}
